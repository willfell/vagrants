# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  config.vm.define "ac", primary: true do |ac|
    ac.vm.box = "generic/oracle7"
    ac.vm.hostname = "acontrol"
    ac.vm.network "private_network", ip: "172.16.1.12"
    ac.ssh.forward_agent = true 
    ac.vm.provision "shell", inline: $script
    ac.vm.post_up_message = "Ansible Contoller Machine is now up. Private IP 172.16.1.12"

  end
  config.vm.define "ah" do |ah|
    ah.vm.box = "generic/oracle7"
    ah.vm.hostname = "aguest"
    ah.ssh.forward_agent = true
    ah.vm.network "private_network", ip: "172.16.1.13"
    ah.vm.post_up_message = "Ansible host machine is now up Private IP 172.16.1.13"
  end  
  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.



  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  #
    config.vm.provider "virtualbox" do |vb|
  #   # Customize the amount of memory on the VM:
     vb.memory = "1024"
   end
   $script = <<-SCRIPT
   echo "Installing EPEL"
   sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
   echo "Installig Ansible"
   sudo yum install -y ansible
   SCRIPT

  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
